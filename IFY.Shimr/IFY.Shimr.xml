<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IFY.Shimr</name>
    </assembly>
    <members>
        <member name="T:IFY.Shimr.ConstructorShimAttribute">
            <summary>
            Mark a method as being a shim of a constructor.
            </summary>
        </member>
        <member name="T:IFY.Shimr.Extensions.ObjectExtensions">
            <summary>
            Useful extension methods, in separate namespace to reduce pollution.
            </summary>
        </member>
        <member name="M:IFY.Shimr.Extensions.ObjectExtensions.CreateProxy(System.Type)">
            <summary>
            Create a factory proxy.
            Type <paramref name="interfaceType"/> must only implement methods decorated with <see cref="T:IFY.Shimr.StaticShimAttribute"/>.
            </summary>
        </member>
        <member name="M:IFY.Shimr.Extensions.ObjectExtensions.Shim``1(System.Object)">
            <summary>
            Use a shim to make the given object look like the required type.
            Result will also implement <see cref="T:IFY.Shimr.IShim"/>.
            </summary>
        </member>
        <member name="M:IFY.Shimr.Extensions.ObjectExtensions.Shim``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Use a shim to make the given objects look like the required type.
            Results will also implement <see cref="T:IFY.Shimr.IShim"/>.
            </summary>
        </member>
        <member name="M:IFY.Shimr.Extensions.ObjectExtensions.Unshim``1(System.Object)">
            <summary>
            Recast shim to original type.
            No type-safety checks. Must already be <typeparamref name="T"/> or be <see cref="T:IFY.Shimr.IShim"/> of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:IFY.Shimr.Extensions.ObjectExtensions.Unshim``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Recast shims to original type.
            No type-safety checks. Must already be <typeparamref name="T"/> or be <see cref="T:IFY.Shimr.IShim"/> of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:IFY.Shimr.Internal.TypeHelpers.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Get attribute of method, including get/set for property
            </summary>
        </member>
        <member name="M:IFY.Shimr.Internal.TypeHelpers.IsEquivalentType(System.Type,System.Type)">
            <summary>
            Compares for equivalent of types in general usage.
            Identical, assignable, similar generic definition.
            </summary>
            <param name="type">The definition type.</param>
            <param name="other">The type that needs to be equivalent.</param>
            <returns>True if <paramref name="other"/> is equivalent to <paramref name="type"/>.</returns>
        </member>
        <member name="M:IFY.Shimr.Internal.TypeHelpers.IsEquivalentGenericMethodType(System.Type,System.Type)">
            <summary>
            Compares for equivalence of types as used in a generic method.
            Does not compare any part of the generic attributes.
            </summary>
            <param name="type">This type to compare</param>
            <param name="other">The type to compare this type against</param>
            <returns>True if the types can be considered equivalent</returns>
        </member>
        <member name="M:IFY.Shimr.Internal.TypeHelpers.IsEquivalentGenericType(System.Type,System.Type)">
            <summary>
            Compares for equivalent generic types and their attributes.
            </summary>
            <param name="type">The generic type to compare</param>
            <param name="other">The generic type to compare this type against</param>
            <returns>True if <paramref name="other"/> is equivalent to <paramref name="type"/>.</returns>
        </member>
        <member name="M:IFY.Shimr.Internal.TypeHelpers.IsIEnumerableGeneric(System.Type,System.Type@)">
            <summary>
            Close enough estimation that we're looking at an interface that implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="type">The generic type to compare</param>
            <param name="elementType">The element type of the enumerable</param>
            <returns>True if this type does implement <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:IFY.Shimr.Internal.TypeHelpers.RebuildGenericType(System.Type,System.Type[])">
            <summary>
            Rebuilds a complex type that may make use of method generic attributes and replaces
            them with the actual method generic attributes of the same name.
            </summary>
            <param name="type">The type that may include method generics</param>
            <param name="generics">Target method generics to use</param>
            <returns>The rebuilt type</returns>
        </member>
        <member name="M:IFY.Shimr.Internal.TypeHelpers.ResolveType(System.Type)">
            <summary>
            Resolves array or <see cref="T:System.Collections.Generic.IEnumerable`1"/> types to the internal element type, or return the given type.
            </summary>
            <param name="type">A type or collection of a type.</param>
            <returns>A singular type.</returns>
        </member>
        <member name="T:IFY.Shimr.IShim">
            <summary>
            Interface for all shimmed types
            </summary>
        </member>
        <member name="M:IFY.Shimr.IShim.Unshim">
            <summary>
            Return the original object that has been shimmed.
            </summary>
        </member>
        <member name="T:IFY.Shimr.ProxyBehaviour">
            <summary>
            Specify how the <see cref="T:IFY.Shimr.ShimProxyAttribute"/> member is expected to behave.
            </summary>
        </member>
        <member name="F:IFY.Shimr.ProxyBehaviour.Default">
            <summary>
            Will override existing members, otherwise adds.
            </summary>
        </member>
        <member name="F:IFY.Shimr.ProxyBehaviour.Override">
            <summary>
            Shimmed type must provide the member to be overriden.
            </summary>
        </member>
        <member name="F:IFY.Shimr.ProxyBehaviour.Add">
            <summary>
            Shim must be defining a member not in the shimmed type.
            </summary>
        </member>
        <member name="T:IFY.Shimr.ShimAttribute">
            <summary>
            Mark a member type as explicitly shimming an item with a different name.
            </summary>
        </member>
        <member name="P:IFY.Shimr.ShimAttribute.DefinitionType">
            <summary>
            The type that defines the member, for when there's a conflict.
            </summary>
        </member>
        <member name="P:IFY.Shimr.ShimAttribute.ImplementationName">
            <summary>
            The name of the member in the target type.
            </summary>
        </member>
        <member name="M:IFY.Shimr.ShimAttribute.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="definitionType">The type that defines the member, for when there's a conflict.</param>
        </member>
        <member name="M:IFY.Shimr.ShimAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name">The name of the member in the target type.</param>
        </member>
        <member name="M:IFY.Shimr.ShimAttribute.#ctor(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="definitionType">The type that defines the member, for when there's a conflict.</param>
            <param name="name">The name of the member in the target type.</param>
        </member>
        <member name="T:IFY.Shimr.ShimBuilder">
            <summary>
            Provides facility to create a shim that guarantees an object can be treated as the specified interface type.
            </summary>
        </member>
        <member name="M:IFY.Shimr.ShimBuilder.ResetState">
            <summary>
            Not needed during normal use.
            Clears type cache to allow multiple testing.
            </summary>
        </member>
        <member name="F:IFY.Shimr.ShimBuilder._dynamicTypeCache">
            <summary>
            Don't compile the type every time
            </summary>
        </member>
        <member name="M:IFY.Shimr.ShimBuilder.IgnoreMissingMembers``1">
            <summary>
            Sets the creation-time assertion that all <typeparamref name="TInterface"/> members must exist in the shimmed type.
            Execution of such members will throw <see cref="T:System.NotImplementedException"/>.
            Once set, cannot be reversed.
            </summary>
        </member>
        <member name="M:IFY.Shimr.ShimBuilder.Create``1">
            <summary>
            Create a factory proxy.
            <typeparamref name="TInterface"/> must only implement methods decorated with <see cref="T:IFY.Shimr.StaticShimAttribute"/>.
            </summary>
        </member>
        <member name="M:IFY.Shimr.ShimBuilder.Create(System.Type)">
            <summary>
            Create a factory proxy.
            Type <paramref name="interfaceType"/> must only implement methods decorated with <see cref="T:IFY.Shimr.StaticShimAttribute"/>.
            </summary>
        </member>
        <member name="M:IFY.Shimr.ShimBuilder.Shim``1(System.Object)">
            <summary>
            Use a shim to make the given object look like the required type.
            Result will also implement <see cref="T:IFY.Shimr.IShim"/>.
            </summary>
        </member>
        <member name="M:IFY.Shimr.ShimBuilder.Shim``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Use a shim to make the given objects look like the required type.
            Results will also implement <see cref="T:IFY.Shimr.IShim"/>.
            </summary>
        </member>
        <member name="M:IFY.Shimr.ShimBuilder.Shim(System.Type,System.Object)">
            <summary>
            Use a shim to make the given object look like the required type.
            Result will also implement <see cref="T:IFY.Shimr.IShim"/>.
            </summary>
        </member>
        <member name="M:IFY.Shimr.ShimBuilder.Unshim``1(System.Object)">
            <summary>
            Recast shim to original type.
            No type-safety checks. Must already be <typeparamref name="T"/> or be <see cref="T:IFY.Shimr.IShim"/> of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:IFY.Shimr.ShimBuilder.Unshim``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Recast shims to original type.
            No type-safety checks. Must already be <typeparamref name="T"/> or be <see cref="T:IFY.Shimr.IShim"/> of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:IFY.Shimr.ShimProxyAttribute">
            <summary>
            Mark a shim member as being a proxy to an implementation elsewhere.
            </summary>
        </member>
        <member name="P:IFY.Shimr.ShimProxyAttribute.ImplementationType">
            <summary>
            The type that implements this member.
            </summary>
        </member>
        <member name="P:IFY.Shimr.ShimProxyAttribute.ImplementationName">
            <summary>
            The name of the implemenation member.
            </summary>
        </member>
        <member name="P:IFY.Shimr.ShimProxyAttribute.Behaviour">
            <summary>
            The behaviour of this proxy member.
            </summary>
        </member>
        <member name="T:IFY.Shimr.StaticShimAttribute">
            <summary>
            Mark individual properties/fields or methods as being static within another type, or the entire interface.
            </summary>
        </member>
        <member name="P:IFY.Shimr.StaticShimAttribute.TargetType">
            <summary>
            The type that implements this member.
            </summary>
        </member>
        <member name="P:IFY.Shimr.StaticShimAttribute.IsConstructor">
            <summary>
            True if this member calls a constructor on the target type.
            </summary>
        </member>
        <member name="T:IFY.Shimr.TypeShimAttribute">
            <summary>
            Mark signature type as being automatically shimmed from real implementation type
            </summary>
        </member>
        <member name="T:IFY.Shimr.ShimgenAttribute">
            <summary>
            Marks this type as being a sourcegen shim.
            </summary>
        </member>
        <member name="M:IFY.Shimr.ShimgenAttribute.#ctor(System.Type)">
            <summary>
            Marks this type as being a sourcegen shim.
            </summary>
        </member>
    </members>
</doc>
