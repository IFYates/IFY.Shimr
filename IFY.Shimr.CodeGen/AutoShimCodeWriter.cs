using IFY.Shimr.CodeGen.Models;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace IFY.Shimr.CodeGen;

internal class AutoShimCodeWriter(GeneratorExecutionContext context)
{
    public const string CG_NAMESPACE = "IFY.Shimr.Extensions";
    public const string CG_CLASSNAME = "AutogeneratedShims";
    public const string CG_CLASSNAMEFULL = $"{CG_NAMESPACE}.{CG_CLASSNAME}";

    public LanguageVersion CSLangver { get; }
        = (context.Compilation.SyntaxTrees.FirstOrDefault().Options as CSharpParseOptions)?.LanguageVersion
        ?? LanguageVersion.Default;

    public void WriteFactoryClass(StringBuilder code)
    {
        code.AppendLine("using System;")
            .AppendLine($"namespace {CG_NAMESPACE}")
            .AppendLine("{")
            .AppendLine("    public static partial class ShimBuilder")
            .AppendLine("    {")

            .AppendLine("        public static T Create<T>()")
            .AppendLine("        {")
            .AppendLine("            return default(T);")
            .AppendLine("        }")

            .AppendLine("    }")
            .AppendLine("}");
    }

    public void WriteExtensionClass(StringBuilder code, IEnumerable<ShimModel> shims)
    {
        code.AppendLine("using System;")
            .AppendLine("using System.Diagnostics.CodeAnalysis;")
            .AppendLine($"namespace {CG_NAMESPACE}")
            .AppendLine("{")
            .AppendLine("    /// <summary>")
            .AppendLine("    /// The automatically generated 'Shim' and 'Unshim' extension methods.")
            .AppendLine("    /// </summary>")
            .AppendLine($"    public static partial class {CG_CLASSNAME}")
            .AppendLine("    {");

        // Shim: Underlying -> Interface
        var shimTypes = shims.GroupBy(s => s.UnderlyingFullName).ToArray();
        foreach (var underlyingShims in shimTypes)
        {
            var underlyingType = underlyingShims.First().UnderlyingType;
            if (CSLangver >= LanguageVersion.CSharp8)
            {
                code.AppendLine("        [return: NotNullIfNotNull(\"inst\")]");
            }
            code.AppendLine($"        public static T? Shim<T>(this {underlyingShims.Key}? inst)")
                .Append("            => ").Append(underlyingType.IsValueType ? "!inst.HasValue" : "inst is null")
                .AppendLine($" ? default : Shim<T>({(underlyingType.IsValueType ? "inst.Value" : "inst")});")
                .AppendLine($"        public static T Shim<T>(this {underlyingShims.Key} inst)")
                .AppendLine("        {");
            foreach (var shim in underlyingShims)
            {
                code.AppendLine($"            if (typeof(T) == typeof({shim.InterfaceFullName}))")
                    .AppendLine("            {")
                    .AppendLine($"                return (T)(object)new {shim.Name}(inst);")
                    .AppendLine("            }");
            }
            code.AppendLine("            throw new NotSupportedException();") // TODO: detail
                .AppendLine("        }");
        }

        // Unshim: Interface -> Underlying
        shimTypes = shims.GroupBy(s => s.InterfaceFullName).ToArray();
        foreach (var shim in shimTypes)
        {
            code.AppendLine($"        public static object Unshim(this {shim.Key} shim) => ((IShim)shim).Unshim();")
                .AppendLine($"        public static T Unshim<T>(this {shim.Key} shim) => (T)(object)((IShim)shim).Unshim();");
        }

        code.AppendLine("    }")
            .AppendLine("}");
    }

    public void WriteShimClass(StringBuilder code, ShimModel shim)
    {
        code.AppendLine("using System;")
            .AppendLine($"namespace {CG_NAMESPACE}")
            .AppendLine("{")
            .AppendLine($"    public static partial class {CG_CLASSNAME}")
            .AppendLine("    {")
            .AppendLine($"        protected class {shim.Name} : {shim.InterfaceFullName}, IShim") // TODO: only visible to Extensions
            .AppendLine("        {")
            .AppendLine($"            protected readonly {shim.UnderlyingFullName} _inst;")
            .AppendLine($"            public {shim.Name}({shim.UnderlyingFullName} inst) => _inst = inst;")
            .AppendLine("            public object Unshim() => _inst;");

        var members = shim.Shimterface.ResolveShimMembers();
        foreach (var member in members)
        {
            member.GenerateCode(code, shim.UnderlyingType);
        }

        if (!members.OfType<ShimMethod>().Any(m => m.Name == nameof(ToString) && m.Parameters.Length == 0))
        {
            code.AppendLine("            public override string ToString() => _inst.ToString();");
        }

        code.AppendLine("        }")
            .AppendLine("    }")
            .AppendLine("}");
    }
}
